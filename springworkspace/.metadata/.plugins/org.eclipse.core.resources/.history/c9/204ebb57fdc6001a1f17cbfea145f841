<?xml version="1.0" encoding="UTF-8"?>

<!-- ==== #29. mapper 기본설정 ==== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ==== #29. 루트 엘리먼트 & 네임스페이스 설정(프로젝트 전체내에서 유일해야 한다.) ==== -->
<mapper namespace="board">

	<insert id="test_insert">
	<!-- id만큼은 고유해야됨 -->
		insert into spring_test1 (no, name, writeday) 
		values(101, '홍길동', default) <!-- 맨 마지막에 세미콜론 (;) 붙이면 꽝 !! -->
	</insert>
	
	<!-- 주의해야할 사항은 리턴타입이 List<E> 이더라도 resultType 은 E 으로 해야만 한다. -->
	<select id="test_select" resultType="com.spring.model.TestVO">		
		select no, name, to_char(writeday, 'yyyy-mm-dd hh24:mi:ss') AS writeday
		from spring_test1
		order by writeday desc
	</select>

	<!--  ##### 중요  ##### 
	
		HashMap 타입으로 매개변수를 받아온것을 꺼내서 사용할때
		1. 데이터로 사용할때는 #{key명} 이고,
		2. 식별자(테이블명, 컬럼명)로 사용할때는 ${key명} 이고,
		3. myBatis에서 제공하는 if 엘리먼트나 choose 엘리먼트 안에서 사용할때는
		      그냥 <if test="key명"> <when test="key명"> 으로 사용한다.
		      
	-->
	<insert id="test_insertPm" parameterType="java.util.HashMap">
									 <!-- 패키지명 java.util.은 생략할 수 있음 -->
		insert into spring_test1 (no, name, writeday) 
		values(#{no}, #{name}, default)
	</insert>
	
	<insert id="ajaxtest_insert" parameterType="HashMap">
		insert into spring_test1 (no, name, writeday) 
		values(#{no}, #{name}, default)
	</insert>
	
	
	
	<select id="employees_select">
		select employee_id, first_name || ' ' || last_name AS ename, salary
		from employees;
	</select>
	
	
	<!-- 	또는 HashMap으로 해보기 ↓
	<resultMap type="HashMap" id="employeesMap">
		<result property="EMPLOYEE_ID" column="employee_id" javaType="String" />
		<result property="ENAME" column="ename" javaType="String" />
		<result property="YEARPAY" column="yearpay" javaType="String" />
		<result property="GENDER" column="gender" javaType="String" />
		<result property="AGE" column="age" javaType="String" />
	</resultMap>
	
	<select id="test_employees" resultMap="employeesMap">
		select employee_id
		     , first_name || ' ' || last_name AS ename
		     , nvl(salary*12+salary*commission_pct, salary*12) AS yearpay
		     , case when substr(jubun,7,1) in('1','3') then '남' else '여' end  AS gender
		     , extract(year from sysdate) - (case when substr(jubun,7,1) in('1','2') then 1900 else 2000 end + to_number(substr(jubun,1,2)) ) + 1 AS age 
		from employees
	</select>
	 -->
	 
	 
	 
	 
	 
	 <!-- ======================================================================== -->
	 
	 <!-- === #39. 메인 페이지용 이미지 파일 가져오기  -->
	 <select id="getImgfilenameList" resultType="String">
	 					<!-- HashMap 아니면 전부 resultType -->
		select imgfilename
		from board_img_advertise
		order by imgno desc
	 </select>
	 
	 
	 <!-- === #47. 로그인 처리하기  -->
	 <select id="getLoginMember" parameterType="HashMap" resultType="com.spring.member.model.MemberVO">
	  											<!-- select 된 결과물을 MemberVO로 넘겨줌 -->
		select idx, userid, name, email, gradelevel
		    , trunc( months_between(sysdate, lastPwdChangeDate) ) AS pwdchangegap 
			, trunc( months_between(sysdate, lastLoginDate) ) AS lastlogindategap 
		from mymvc_shopping_member
		where status = 1 and 
			  userid = #{userid} and 
			  pwd = #{pwd}
	 </select>
	 
	 <update id="setLastLoginDate" parameterType="HashMap">
	 	update mymvc_shopping_member set lastLoginDate = sysdate
	 	where userid = #{userid}
	 </update>
	 
	 
	 <!-- === #57. 글쓰기 (파일첨부가 없는 글쓰기) === -->
	 <insert id="add" parameterType="com.spring.board.model.BoardVO">
	 	insert into tblBoard(seq, fk_userid, name, subject, content, pw, readCount, regDate, status)
	 	values(boardSeq.nextval, #{fk_userid}, #{name}, #{subject}, #{content}, #{pw}, default, default, default)
	 							<!-- ▲ BoardVO에서 get다음 들어가는 이름 -->
	 </insert>
	 
	 
	 <!-- === #61. 페이징 처리를 안한 검색어가 없는 전체 글목록 보여주기 === -->
	 <select id="getboardList" resultType="com.spring.board.model.BoardVO" >
	 	select seq, fk_userid, subject, name, regDate, readCount
	 	from tblBoard
	 	where status = 1
	 	order by seq desc
	 </select>
	 
	 
	 <!-- === #66. (댓글쓰기 없는 게시판에서) 글 1개 보여주기 === -->
	 <select id="getView" parameterType="String" resultType="com.spring.board.model.BoardVO" >
		select  previousseq, previoussubject, 
		        seq, fk_userid, name, subject, content, readCount, regDate, 
		        nextseq, nextsubject
		from 
		(
		    select lag(seq, 1) over(order by seq desc)  as previousseq
		            , lag(subject, 1) over(order by seq desc) as previoussubject 
		            , seq, fk_userid, name, subject, content, readCount
		            , to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') as regDate
		           
		            , lead(seq, 1) over(order by seq desc) as nextseq
		            , lead(subject, 1) over(order by seq desc) as nextsubject 
		    from tblBoard
		    where status = 1
		) V
		where V.seq = #{seq}
	 </select>	 
	 
	 <!-- === #67. 글조회수 1증가 하기 === -->
	 <update id="setAddReadCount" parameterType="String" resultType="com.spring.board.model.BoardVO" >
	 	update tblBoard set readCount = readCount + 1 
	 	where seq = #{
	 </update>
	 
	 
</mapper>