/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.55
 * Generated at: 2020-07-10 05:11:18 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.tiles1.test;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class datatables_005ftest_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/C:/springworkspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/Board/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1594082854500L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvarStatus_005fvar_005fitems;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvarStatus_005fvar_005fitems = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvarStatus_005fvar_005fitems.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	String ctxPath = request.getContextPath();
	//		/board

      out.write("  \r\n");
      out.write("\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://cdn.datatables.net/1.10.19/css/jquery.dataTables.min.css\" type=\"text/css\"/>\r\n");
      out.write("<script type=\"text/javascript\" src=\"https://cdn.datatables.net/1.10.19/js/jquery.dataTables.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\t/*\r\n");
      out.write("\t== datatables 처리모드 ==\r\n");
      out.write("\t\t  \r\n");
      out.write("\tdatatables에는 두 가지 처리 방법이 있습니다\r\n");
      out.write("\tdatatables 뿐만 아니라 게시판 처리 방식에 두 가지 방법이 있는 것입니다.\r\n");
      out.write("\t\r\n");
      out.write("\t\"클라이언트 사이드 렌더링\" 과  \"서버사이드 렌더링\" 2 가지 방법입니다.\r\n");
      out.write("\t\r\n");
      out.write("\t- 게시판 관점에서 바라 본 클라이언트 사이드 렌더링 -\r\n");
      out.write("\t  => 게시판 관점에서 바라봤을 때 \"클라이언트 사이드 렌더링\" 은 \r\n");
      out.write("\t           초기 페이지 로딩 시 모든 데이터를 가져와서 페이지 블럭단위만 보여준 후 나머지는 가리는 방식입니다. \r\n");
      out.write("\t           따라서 페이지 전환 시 서버 호출이 일어나지 않으며 오버헤드가 없기 때문에 초기 로딩을 제외하면 속도 이슈가 없습니다.\r\n");
      out.write("\t\r\n");
      out.write("\t- 게시판 관점에서 바라 본 서버 사이드 렌더링 - \r\n");
      out.write("\t  => 일반적으로 게시판을 만들게 되면 \"서버 사이드 렌더링\"으로 만들게 됩니다.\r\n");
      out.write("\t           쉽게 페이지 전환이 일어날 경우 페이지 번호를 서버측으로 넘긴 후 특정 블럭만 가져와서 출력해주는 방식입니다.\r\n");
      out.write("\t           초기 로딩시에도 페이지 단위의 데이터만 가져오기 때문에 리퀘스트 오버헤드를 제외하면 평균적인 속도를 얻어낼 수 있습니다. \r\n");
      out.write("\t\r\n");
      out.write("\t  위와 같이 datatables 또한 두 가지 방식을 제공합니다.\r\n");
      out.write("\t\r\n");
      out.write("\tif you are working with less than 10,000 rows use client-side processing, for greater than 100,000 rows use server-side processing\r\n");
      out.write("\t\r\n");
      out.write("\tdatatables 공식 메뉴얼에서는 데이터가 10000건 이하일 때는 클라이언트 사이드 렌더링을 사용해도 된다고 권장하고있습니다.\r\n");
      out.write("\t  하지만 데이터가 100,000건 이상이 넘어가면 무조건 서버 사이드 렌더링을 사용하라고 권장하고있습니다. \r\n");
      out.write("\t*/\r\n");
      out.write("\t\r\n");
      out.write("\t$(document).ready(function(){\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t$(\"#exampleTbl\").DataTable({\r\n");
      out.write("\t\t\t\"dom\": '<\"top\"lf>rt<\"bottom\"ip>',  // 페이지바가 우측하단에 위치, 검색이 우측상단에 위치하는 것임.  \r\n");
      out.write("\t\t//\t\"dom\": '<\"top\"lp>rt<\"bottom\"if>',  // 페이지바가 우측상단에 위치, 검색이 우측하단에 위치하는 것임.  \r\n");
      out.write("\t\t\t\"paging\"    : true,                // 우측하단에 페이지바를 보여줄것인지 아닌지를 결정하는 것\r\n");
      out.write("\t\t//\t\"paging\"    : false,               // 우측하단에 페이지바를 보여줄것인지 아닌지를 결정하는 것 \r\n");
      out.write("\t\t\t\"ordering\"  : true,                // th에 나오는 값에 따라서 오름차순, 내림차순 정렬을 할것인지 말것인지를 결정하는 것  \r\n");
      out.write("\t\t\t\"info\"      : true,                // 좌측하단에 보여지는 Showing 1 to 10 of 22 entries 를 보여줄것인지 말것인지를 결정하는 것       \r\n");
      out.write("\t\t\t\"filter\"    : true,                // 우측상단에 보여지는 검색을 보여줄것인지 말것인지를 결정하는 것       \r\n");
      out.write("\t\t\t\"lengthChange\"   : true,           // 좌측상단에 보여지는 한페이지당 행의갯수를 결정하는 것  \r\n");
      out.write("\t\t//\t\"order\"     : [[0, \"desc\"]], \t   // 기본 컬럼 정렬 설정  숫자 0은 첫번째 컬럼을 말하며, \"asc\" 또는 \"desc\"를 설정할 수 있다. \r\n");
      out.write("\t\t\t\"order\"     : [[2, \"asc\"],[0, \"desc\"]], // 기본 컬럼 정렬 설정  숫자 0은 첫번째 컬럼을 말하며, \"asc\" 또는 \"desc\"를 설정할 수 있다. \r\n");
      out.write("\t\t//\t\"stateSave\" : false,\r\n");
      out.write("\t\t\t\"stateSave\" : true, \r\n");
      out.write("\t\t/*\r\n");
      out.write("\t\t          클라이언트 사이드 렌더링의 경우 새고로침 시 페이징 현재 상태가 저장되지 않으나\r\n");
      out.write("             stateSave를 true로 활성화할 경우 새로고침 시에도 페이징 되어진 현재 상태가 저장되어 그대로 보여지게 된다.\r\n");
      out.write("             stateSave를 false로 활성화할 경우 새로고침 시에는 초기화 되어 처음의 상태로 보여지게 된다.\r\n");
      out.write("\t\t*/\r\n");
      out.write("\t\t\t\"pagingType\" : \"full_numbers\",  // \"numbers\" , \"simple\" , \"simple_numbers\" , \"full\" , \"full_numbers\" , \"first_last_numbers\" \r\n");
      out.write("\t\t//\t\"scrollX\" : false,   // x 축 스크롤을 활성화 할지의 여부 \r\n");
      out.write("\t\t//\t\"scrollY\" : \"250px\", // y 축의 스크롤의 크기 \r\n");
      out.write("\t\t//\t\"scrollCollapse\" : true // y 축의 스크롤을 활성화 여부. 당연히 y축의 스크롤이 활성화 되면 paging이 안 일어나게 할 수도 있으므로  그렇게 하려면 \"paging\" 을 false로 바꿀수도 있다.  \r\n");
      out.write("\t\t\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("   \r\n");
      out.write("   <h2>데이터테이블즈(datatables)</h2>\r\n");
      out.write("   <h3>datatables 1.10.19 기반으로 작성한 것</h3>\r\n");
      out.write("   <br/>\r\n");
      out.write("   <div style=\"width: 80%; margin: 0 auto;\">\r\n");
      out.write("\t   <table id=\"exampleTbl\" style=\"width: 100%;\" class=\"table table-bordered\">\r\n");
      out.write("\t      <thead>\r\n");
      out.write("\t\t      <tr>\r\n");
      out.write("\t\t         <th>번호</th>\r\n");
      out.write("\t\t         <th>입력번호</th>\r\n");
      out.write("\t\t         <th>성명</th>\r\n");
      out.write("\t\t         <th>작성일자</th>\r\n");
      out.write("\t\t      </tr>\r\n");
      out.write("\t      </thead>\r\n");
      out.write("\t      <tbody>\r\n");
      out.write("\t\t      ");
      if (_jspx_meth_c_005fforEach_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("\t      </tbody>\r\n");
      out.write("\t   </table>\r\n");
      out.write("   </div>\r\n");
      out.write("   \r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fforEach_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f0 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvarStatus_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f0_reused = false;
    try {
      _jspx_th_c_005fforEach_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f0.setParent(null);
      // /WEB-INF/views/tiles1/test/datatables_test.jsp(85,8) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setVar("testvo");
      // /WEB-INF/views/tiles1/test/datatables_test.jsp(85,8) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/tiles1/test/datatables_test.jsp(85,8) '${testvoList}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${testvoList}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      // /WEB-INF/views/tiles1/test/datatables_test.jsp(85,8) name = varStatus type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setVarStatus("status");
      int[] _jspx_push_body_count_c_005fforEach_005f0 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f0 = _jspx_th_c_005fforEach_005f0.doStartTag();
        if (_jspx_eval_c_005fforEach_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\r\n");
            out.write("\t\t         <tr>\r\n");
            out.write("\t\t            <td>");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${status.count}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</td>\r\n");
            out.write("\t\t            <td>");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${testvo.no}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</td>\r\n");
            out.write("\t\t            <td>");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${testvo.name}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</td>\r\n");
            out.write("\t\t            <td>");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${testvo.writeday}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</td>\r\n");
            out.write("\t\t         </tr>\r\n");
            out.write("\t\t      ");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f0.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f0[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f0.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f0.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvarStatus_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f0);
      _jspx_th_c_005fforEach_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f0_reused);
    }
    return false;
  }
}
