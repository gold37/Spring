/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.55
 * Generated at: 2020-07-29 06:17:06 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.tiles.tile2;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class sideinfo_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/C:/springworkspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/Board/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1594082854500L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("\tvar weatherTimejugi = 0;  // 단위는 밀리초\r\n");
      out.write("\r\n");
      out.write("\t$(document).ready(function() {\r\n");
      out.write("\t\tloopshowNowTime();\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 시간이 대략 매 30분 0초가 되면 기상청 날씨정보를 자동 갱신해서 가져오려고 함.\r\n");
      out.write("\t\t// (매 정시마다 변경되어지는 날씨정보를 정시에 보내주지 않고 대략 30분이 지난다음에 보내주므로)\r\n");
      out.write("\t\tvar now = new Date();\r\n");
      out.write("\t\tvar minute = now.getMinutes();  // 현재시각중 분을 읽어온다.\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tif(minute < 30) { // 현재시각중 분이 0~29분 이라면\r\n");
      out.write("\t\t\tweatherTimejugi = (30-minute)*60*1000;  // 현재시각의 분이 0분이라면 weatherTimejugi에 30분을 넣어준다.\r\n");
      out.write("\t\t\t                                        // 현재시각의 분이 5분이라면 weatherTimejugi에 25분을 넣어준다.\r\n");
      out.write("\t\t\t                                        // 현재시각의 분이 29분이라면 weatherTimejugi에 1분을 넣어준다.\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\telse if(minute == 30) {\r\n");
      out.write("\t\t\tweatherTimejugi = 1000;                 // 현재시각의 분이 30분이라면 weatherTimejugi에 1초 넣어준다.\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\telse {                                      // 현재시각의 분이 31~59분이라면\r\n");
      out.write("\t\t\tweatherTimejugi = ( (60-minute)+30 )*60*1000;  // 현재시각의 분이 31분이라면 weatherTimejugi에 (29+30)분을 넣어준다.\r\n");
      out.write("\t\t\t                                               // 현재시각의 분이 40분이라면 weatherTimejugi에 (20+30)분을 넣어준다.\r\n");
      out.write("\t\t\t                                               // 현재시각의 분이 59분이라면 weatherTimejugi에 (1+30)분을 넣어준다.\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tloopshowWeather(); // 기상청 날씨정보 공공API XML데이터 호출하기\r\n");
      out.write("\t\t\r\n");
      out.write("\t}); // end of ready(); ---------------------------------\r\n");
      out.write("\r\n");
      out.write("\tfunction showNowTime() {\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar now = new Date();\r\n");
      out.write("\t\r\n");
      out.write("\t\tvar month = now.getMonth() + 1;\r\n");
      out.write("\t\tif(month < 10) {\r\n");
      out.write("\t\t\tmonth = \"0\"+month;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar date = now.getDate();\r\n");
      out.write("\t\tif(date < 10) {\r\n");
      out.write("\t\t\tdate = \"0\"+date;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar strNow = now.getFullYear() + \"-\" + month + \"-\" + date;\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar hour = \"\";\r\n");
      out.write("\t    if(now.getHours() < 10) {\r\n");
      out.write("\t    \t hour = \"0\"+now.getHours();\r\n");
      out.write("\t    } \r\n");
      out.write("\t    else {\r\n");
      out.write("\t    \thour = now.getHours();\r\n");
      out.write("\t    }\r\n");
      out.write("\t\t\r\n");
      out.write("\t    \r\n");
      out.write("\t\tvar minute = \"\";\r\n");
      out.write("\t\tif(now.getMinutes() < 10) {\r\n");
      out.write("\t\t\tminute = \"0\"+now.getMinutes();\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\tminute = now.getMinutes();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar second = \"\";\r\n");
      out.write("\t\tif(now.getSeconds() < 10) {\r\n");
      out.write("\t\t\tsecond = \"0\"+now.getSeconds();\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\tsecond = now.getSeconds();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tstrNow += \" \"+hour + \":\" + minute + \":\" + second;\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t$(\"#clock\").html(\"<span style='color:green; font-weight:bold;'>\"+strNow+\"</span>\");\r\n");
      out.write("\t\r\n");
      out.write("\t}// end of function showNowTime() -----------------------------\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\tfunction loopshowNowTime() {\r\n");
      out.write("\t\tshowNowTime();\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar timejugi = 1000;   // 시간을 1초 마다 자동 갱신하려고.\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tsetTimeout(function() {\r\n");
      out.write("\t\t\t\t\t\tloopshowNowTime();\t\r\n");
      out.write("\t\t\t\t\t}, timejugi);\r\n");
      out.write("\t\t\r\n");
      out.write("\t}// end of loopshowNowTime() --------------------------\r\n");
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\t// ------ 기상청 날씨정보 공공API XML데이터 호출하기 -------- //\r\n");
      out.write("\tfunction showWeather() {\r\n");
      out.write("\r\n");
      out.write("\t\t$.ajax({\r\n");
      out.write("\t\t\t\turl: \"");
      out.print( request.getContextPath() );
      out.write("/opendata/weatherXML.action\",\r\n");
      out.write("\t\t\t\ttype: \"GET\",\r\n");
      out.write("\t\t\t\tdataType: \"XML\",\r\n");
      out.write("\t\t\t\tsuccess: function(xml){\r\n");
      out.write("\t\t\t\t\t\tvar rootElement = $(xml).find(\":root\");\r\n");
      out.write("\t\t\t\t\t    console.log($(rootElement).prop(\"tagName\"));   \r\n");
      out.write("\t\t\t\t\t    // ==> current\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t   \r\n");
      out.write("\t\t\t\t\t    var weather = $(rootElement).find(\"weather\");\r\n");
      out.write("\t\t\t\t\t    console.log( $(weather).attr(\"year\") +\"년 \" + $(weather).attr(\"month\") + \"월 \" + $(weather).attr(\"day\") + \"일 \" + $(weather).attr(\"hour\") + \"시\" );        \r\n");
      out.write("\t\t\t\t\t\t// 2020년 07월 29일 14시\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\tvar updateTime = $(weather).attr(\"year\") +\"년 \" + $(weather).attr(\"month\") + \"월 \" + $(weather).attr(\"day\") + \"일 \" + $(weather).attr(\"hour\") + \"시\";\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t    var localArr = $(rootElement).find(\"local\");\r\n");
      out.write("\t\t\t\t\t\tconsole.log(\"지역갯수: \"+localArr.length); \r\n");
      out.write("\t\t\t\t\t\t// 95\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\tvar html = \"업데이트 : <span style='font-weight:bold;'>\"+updateTime+\"</span>&nbsp;\";\r\n");
      out.write("\t\t\t\t\t\t    html += \"<span style='color:blue; cursor:pointer; font-size:9pt;' onClick='javascript:showWeather();'>업데이트</span><br/>\";\r\n");
      out.write("\t\t\t\t\t\t    html += \"<table class='table table-hover' align='center'>\";\r\n");
      out.write("\t\t\t\t\t\t\thtml += \"<tr>\";\r\n");
      out.write("\t\t\t\t\t\t\thtml += \"<th>지역</th>\";\r\n");
      out.write("\t\t\t\t\t\t\thtml += \"<th>날씨</th>\";\r\n");
      out.write("\t\t\t\t\t\t\thtml += \"<th>기온</th>\";\r\n");
      out.write("\t\t\t\t\t\t\thtml += \"</tr>\";\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t    for(var i=0; i<localArr.length; i++) {\r\n");
      out.write("\t\t\t\t\t    \tvar local = $(localArr).eq(i);  \r\n");
      out.write("\t\t\t\t\t\t\t   /* .eq(index) 는 선택된 요소들을 인덱스 번호로 찾을 수 있는 선택자이다. \r\n");
      out.write("\t\t\t\t\t\t\t            마치 배열의 인덱스(index)로 값(value)를 찾는 것과 같은 효과를 낸다.\r\n");
      out.write("\t\t\t\t\t\t\t   */\r\n");
      out.write("\t\t\t\t\t\t\t   console.log($(local).text() + \" stn_id:\" + $(local).attr(\"stn_id\") + \" icon:\" + $(local).attr(\"icon\") + \" desc:\" + $(local).attr(\"desc\") + \" ta:\" + $(local).attr(\"ta\") );\r\n");
      out.write("\t\t\t\t\t           // 속초 stn_id:90 icon:01 desc:맑음 ta:-0.7\r\n");
      out.write("\t\t\t\t\t           // 북춘천 stn_id:93 icon:01 desc:맑음 ta:-5.7\r\n");
      out.write("\t\t\t\t\t           // .......\r\n");
      out.write("\t\t\t\t\t           \r\n");
      out.write("\t\t\t\t\t           var icon = $(local).attr(\"icon\");\r\n");
      out.write("\t\t\t\t\t           if(icon == \"\") {\r\n");
      out.write("\t\t\t\t\t        \t   icon = \"없음\";\r\n");
      out.write("\t\t\t\t\t           }\r\n");
      out.write("\t\t\t\t\t\t\t   \r\n");
      out.write("\t\t\t\t\t           html += \"<tr>\";\r\n");
      out.write("\t\t\t\t\t           html += \"<td>\"+$(local).text()+\"</td><td><img src='/board/resources/images/weather/\"+icon+\".png' />\"+$(local).attr(\"desc\")+\"</td><td>\"+$(local).attr(\"ta\")+\"</td>\";\r\n");
      out.write("\t\t\t\t\t           html += \"</tr>\";\r\n");
      out.write("\t\t\t\t\t    }\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t    html += \"</table>\";\r\n");
      out.write("\t\t\t\t\t    \r\n");
      out.write("\t\t\t\t\t    $(\"#displayWeather\").html(html);\r\n");
      out.write("\t\t\t\t\t    \r\n");
      out.write("\t\t\t\t\t}, // end of success: function(xml)-----------------------------\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\terror: function(request, status, error){\r\n");
      out.write("\t\t\t\t\t\talert(\"code: \"+request.status+\"\\n\"+\"message: \"+request.responseText+\"\\n\"+\"error: \"+error);\r\n");
      out.write("\t\t\t\t\t}\t\r\n");
      out.write("\t\t\t\t}); // end of $.ajax({});-------------------------------------------------\r\n");
      out.write("\t\t\r\n");
      out.write("\t} \r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\tfunction loopshowWeather() {\r\n");
      out.write("\t\tshowWeather();\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tsetTimeout(function() {\r\n");
      out.write("\t\t\t   showWeather();\t\r\n");
      out.write("\t\t\t}, weatherTimejugi); // 현재시각의 분이 5분이라면 weatherTimejugi가 25분이므로 25분후인 30분에 showWeather();를 실행한다.\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tsetTimeout(function() {\r\n");
      out.write("\t           loopshowWeather();\t\r\n");
      out.write("\t\t\t}, weatherTimejugi + (60*60*1000));  // 현재시각의 분이 5분이라면 weatherTimejugi가 25분이므로 25분후인 30분에 1시간을 더한후에 showWeather();를 실행한다.\r\n");
      out.write("\t} // end of loopshowWeather() --------------------------\t\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<div style=\"margin: 0 auto;\" align=\"center\">\r\n");
      out.write("\t현재시각 :&nbsp; \r\n");
      out.write("\t<div id=\"clock\" style=\"display:inline;\"></div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<div id=\"displayWeather\" style=\"min-width: 90%; max-height: 500px; overflow-y: scroll; margin-top: 20px; margin-bottom: 70px; padding-left: 10px; padding-right: 10px;\"></div>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
