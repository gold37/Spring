/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.55
 * Generated at: 2020-07-30 05:37:47 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.tiles1.chatting;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class multichat_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/C:/springworkspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/Board/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1594082854500L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\" >\r\n");
      out.write("\r\n");
      out.write("    // === !!! WebSocket 통신은 스크립트로 작성하는 것이다. !!! === //\r\n");
      out.write("    $(document).ready(function(){\r\n");
      out.write("        \r\n");
      out.write("        var url = window.location.host;   // 웹브라우저의 주소창의 포트까지 가져옴\r\n");
      out.write("    //  alert(\"url : \" + url);\r\n");
      out.write("    //  결과값  url: 192.168.50.65:9090\r\n");
      out.write("    \t    \r\n");
      out.write("    \tvar pathname = window.location.pathname; // '/'부터 오른쪽에 있는 모든 경로\r\n");
      out.write("    // \talert(\"pathname : \" + pathname);\r\n");
      out.write("    //  결과값  pathname : /board/chatting/multichat.action\r\n");
      out.write("    \t \t\r\n");
      out.write("    \tvar appCtx = pathname.substring(0, pathname.lastIndexOf(\"/\"));  // \"전체 문자열\".lastIndexOf(\"검사할 문자\");   \r\n");
      out.write("    // \talert(\"appCtx : \" + appCtx);\r\n");
      out.write("    //  결과값  appCtx : /board/chatting\r\n");
      out.write("    \t \t\r\n");
      out.write("    \tvar root = url+appCtx;\r\n");
      out.write("    // \talert(\"root : \" + root);\r\n");
      out.write("    //  결과값   root : 192.168.50.65:9090/board/chatting\r\n");
      out.write("   \t\r\n");
      out.write("    \tvar wsUrl = \"ws://\"+root+\"/multichatstart.action\";  // 웹소켓통신을 하기위해서는 http:// 을 사용하는 것이 아니라 ws:// 을 사용해야 한다. \r\n");
      out.write("       \tvar websocket = new WebSocket(wsUrl);  //  /WEB-INF/web.xml 에 가서 appServlet 의 contextConfigLocation 을 수정한다. \r\n");
      out.write("     // var websocket = new WebSocket(\"ws://192.168.50.65:9090/board/chatting/multichatstart.action\");\r\n");
      out.write("        \r\n");
      out.write("     // alert(wsUrl);\r\n");
      out.write("    \t\r\n");
      out.write("    \t// >>>> === Javascript WebSocket 이벤트 정리 === <<<< \r\n");
      out.write("\t    //      onopen    ==>  WebSocket 연결\r\n");
      out.write("\t    //      onmessage ==>  메시지 수신\r\n");
      out.write("\t    //      onerror   ==>  전송 에러 발생\r\n");
      out.write("\t    //      onclose   ==>  WebSocket 연결 해제\r\n");
      out.write("    \t\r\n");
      out.write("    \tvar messageObj = {}; // 자바스크립트에서 객체 생성함.\r\n");
      out.write("    \t\r\n");
      out.write("\t    // === 웹소켓에 최초로 연결이 되었을 경우에 실행되어지는 콜백함수 ===\r\n");
      out.write("    \twebsocket.onopen = function() {\r\n");
      out.write("    \t//\talert(\"웹소켓 연결됨!!\");\r\n");
      out.write("    \t\t$(\"#chatStatus\").text(\"정보: 웹소켓에 연결이 성공됨!!\");\r\n");
      out.write("    \t\r\n");
      out.write("    \t/*\t\r\n");
      out.write("            messageObj = {};  // 초기화\r\n");
      out.write("            messageObj.message = \"반갑습니다.\";\r\n");
      out.write("            messageObj.type = \"all\";\r\n");
      out.write("            messageObj.to = \"all\";\r\n");
      out.write("        */    \r\n");
      out.write("            // 또는\r\n");
      out.write("            messageObj = { message : \"채팅방에 <span style='color: red;'>입장</span>했습니다\"\r\n");
      out.write("        \t\t     \t , type : \"all\"\r\n");
      out.write("        \t\t     \t , to : \"all\" };  // 자바스크립트에서 객체의 데이터값 초기화\r\n");
      out.write("        \t\t     \t\r\n");
      out.write("            websocket.send(JSON.stringify(messageObj));\r\n");
      out.write("                        // JSON.stringify() 는 값을 그 값을 나타내는 JSON 표기법의 문자열(String)로 변환한다\r\n");
      out.write("                        /*\r\n");
      out.write("\t                        JSON.stringify({});                  // '{}'\r\n");
      out.write("\t\t\t\t\t\t\tJSON.stringify(true);                // 'true'\r\n");
      out.write("\t\t\t\t\t\t\tJSON.stringify('foo');               // '\"foo\"'\r\n");
      out.write("\t\t\t\t\t\t\tJSON.stringify([1, 'false', false]); // '[1,\"false\",false]'\r\n");
      out.write("\t\t\t\t\t\t\tJSON.stringify({ x: 5 });            // '{\"x\":5}'\r\n");
      out.write("                        */\r\n");
      out.write("        };\r\n");
      out.write("    \t\r\n");
      out.write("    \t// === 메시지 수신 콜백함수\r\n");
      out.write("        websocket.onmessage = function(evt) {\r\n");
      out.write("            $(\"#chatMessage\").append(evt.data);\r\n");
      out.write("            $(\"#chatMessage\").append(\"<br />\");\r\n");
      out.write("            $(\"#chatMessage\").scrollTop(99999999);\r\n");
      out.write("        };\r\n");
      out.write("        \r\n");
      out.write("        // === 웹소캣 연결 해제 콜백함수\r\n");
      out.write("        websocket.onclose = function() {\r\n");
      out.write("            // websocket.send(\"채팅을 종료합니다.\");\r\n");
      out.write("        }\r\n");
      out.write("         \r\n");
      out.write("        \r\n");
      out.write("        $(\"#message\").keydown(function (key) {\r\n");
      out.write("             if (key.keyCode == 13) {\r\n");
      out.write("                $(\"#sendMessage\").click();\r\n");
      out.write("             }\r\n");
      out.write("          });\r\n");
      out.write("         \r\n");
      out.write("        $(\"#sendMessage\").click(function() {\r\n");
      out.write("            if( $(\"#message\").val() != \"\") {\r\n");
      out.write("                \r\n");
      out.write("            \t// ==== 자바스크립트에서 replace를 replaceAll 처럼 사용하기 ====\r\n");
      out.write("                // 자바스크립트에서 replaceAll 은 없다.\r\n");
      out.write("                // 정규식을 이용하여 대상 문자열에서 모든 부분을 수정해 줄 수 있다.\r\n");
      out.write("                // 수정할 부분의 앞뒤에 슬래시를 하고 뒤에 gi 를 붙이면 replaceAll 과 같은 결과를 볼 수 있다.\r\n");
      out.write("                var messageVal = $(\"#message\").val();\r\n");
      out.write("                messageVal = messageVal.replace(/<script/gi, \"&lt;script\"); // 스크립트 공격을 막으려고 한 것임.\r\n");
      out.write("            \t\r\n");
      out.write("                messageObj = {};\r\n");
      out.write("                messageObj.message = messageVal;\r\n");
      out.write("                messageObj.type = \"all\";\r\n");
      out.write("                messageObj.to = \"all\";\r\n");
      out.write("                 \r\n");
      out.write("                var to = $(\"#to\").val();\r\n");
      out.write("                if ( to != \"\" ) {\r\n");
      out.write("                    messageObj.type = \"one\";\r\n");
      out.write("                    messageObj.to = to;\r\n");
      out.write("                }\r\n");
      out.write("                 \r\n");
      out.write("                websocket.send(JSON.stringify(messageObj));\r\n");
      out.write("                // JSON.stringify() 는 값을 그 값을 나타내는 JSON 표기법의 문자열로 변환한다\r\n");
      out.write("                \r\n");
      out.write("                $(\"#chatMessage\").append(\"<span style='color:navy; font-weight:bold;'>[나] ▷ \" + messageVal + \"</span><br/>\");\r\n");
      out.write("                $(\"#chatMessage\").scrollTop(99999999);\r\n");
      out.write("                 \r\n");
      out.write("                $(\"#message\").val(\"\");\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("        \r\n");
      out.write("        /////////////////////////////////////////////////////////////\r\n");
      out.write("        \r\n");
      out.write("        $(\"#btnAllDialog\").hide();\r\n");
      out.write("        \r\n");
      out.write("        // 아래는 귓속말을 위해서 대화를 나누는 상대방의 이름을 클릭하면 상대방IP주소를 귓속말대상IP주소에 입력하도록 하는 것.\r\n");
      out.write("        $(document).on(\"click\",\".loginuserName\",function(){\r\n");
      out.write("        \t/* class loginuserName 은 \r\n");
      out.write("        \t   com.spring.chatting.websockethandler.WebsocketEchoHandler 의 \r\n");
      out.write("        \t   protected void handleTextMessage(WebSocketSession wsession, TextMessage message) 메소드내에\r\n");
      out.write("        \t      기재해두었음.\r\n");
      out.write("        \t*/\r\n");
      out.write("        \tvar ip = $(this).prev().text();\r\n");
      out.write("        //\talert(ip);\r\n");
      out.write("            $(\"#to\").val(ip); \r\n");
      out.write("            \r\n");
      out.write("            $(\"#privateWho\").text($(this).text());\r\n");
      out.write("            $(\"#btnAllDialog\").show();\r\n");
      out.write("        });\r\n");
      out.write("        \r\n");
      out.write("        \r\n");
      out.write("        $(\"#btnAllDialog\").click(function(){\r\n");
      out.write("        \t// 귀속말대화끊기 버튼을 클릭한 경우. \r\n");
      out.write("        \t// 전체대상으로 채팅하겠다는 말이다. \r\n");
      out.write("            \t$(\"#to\").val(\"\");\r\n");
      out.write("            \t$(\"#privateWho\").text(\"\");\r\n");
      out.write("            \t$(this).hide();\r\n");
      out.write("        });\r\n");
      out.write("        \r\n");
      out.write("    });// end of $(document).ready()----------------------\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<div id=\"chatStatus\"></div><br/>\r\n");
      out.write("\t<input type=\"text\" id=\"to\" placeholder=\"귓속말대상IP주소\"/><br/>\r\n");
      out.write("\t귓속말대상 : <span id=\"privateWho\" style=\"font-weight: bold; color: red;\"></span>\r\n");
      out.write("\t&nbsp;&nbsp;<button type=\"button\" id=\"btnAllDialog\">귀속말대화끊기</button><br/>\r\n");
      out.write("\t<input type=\"text\" id=\"message\" size=\"50\" placeholder=\"메시지 내용\"/>\r\n");
      out.write("    <input type=\"button\" id=\"sendMessage\" value=\"보내기\" />\r\n");
      out.write("    <input type=\"button\" onClick=\"javascript:location.href='");
      out.print(request.getContextPath() );
      out.write("/index.action'\" value=\"채팅방나가기\" />\r\n");
      out.write("    \r\n");
      out.write("    <div id=\"chatMessage\" style=\"overFlow: auto; max-height: 500px;\"></div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
